#include <SoftwareSerial.h>// import the serial library
#include <Servo.h>

#define LEFTMOTORFORWARD 112 //0
#define LEFTMOTORBACKWARD 113 //1
#define RIGHTMOTORFORWARD 114 //2
#define RIGHTMOTORBACKWARD 115 //3
#define LEFTSERVO 116 //4
#define RIGHTSERVO 117 //5
#define LEDTOGGLE 118 //6

#define SPEEDOFF 112 //0
#define SPEEDSLOW 113 //1
#define SPEEDFAST 114 //2
#define SERVOCLOSE 113 //1
#define SERVOOPEN 114 //2

#define ANGLECHANGE 10

SoftwareSerial Bluetooth(13, 15); // RX, TX
//int ledpin=16; // led on D13 will show blink on / off
int Byte1; // the data given from Computer
int Byte2;
bool byteCount;
bool messageRecieved;

Servo leftServo;
Servo rightServo;
int leftServoPin = 12;
int rightServoPin = 14;
int leftServoPos;
int rightServoPos;

bool motorDirection;
int leftMotorForwardPin = 5;
int leftMotorBackwardPin = 4;
int rightMotorForwardPin = 0;
int rightMotorBackwardPin = 2;

int ledPin = 16;
bool ledOn;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(57600);
  Serial.println("Serial Setup");
  Bluetooth.begin(9600);
  Bluetooth.println("Bluetooth On please press 1 or 0 blink LED ..");
  //pinMode(ledpin,OUTPUT);
  //digitalWrite(ledpin,1);
  byteCount = false;
  messageRecieved = false;

  leftServo.attach(leftServoPin);
  leftServo.write(90);
  leftServoPos = 90;
  rightServo.attach(rightServoPin);
  rightServo.write(90);
  rightServoPos = 90;

  pinMode(leftMotorForwardPin, OUTPUT);
  pinMode(leftMotorBackwardPin, OUTPUT);
  pinMode(rightMotorForwardPin, OUTPUT);
  pinMode(rightMotorBackwardPin, OUTPUT);

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin,LOW);
  ledOn = false;
}

void loop() {
  if (messageRecieved){
    if(Byte1 == LEFTMOTORFORWARD){
      Bluetooth.println("LMF");
      messageRecieved = false;
      motorDirection = true;
      moveLeftMotor(Byte2);
    }else if(Byte1 == LEFTMOTORBACKWARD){
      Bluetooth.println("LMB");
      messageRecieved = false;
      motorDirection = false;
      moveLeftMotor(Byte2);
    }else if(Byte1 == RIGHTMOTORFORWARD){
      Bluetooth.println("RMF");
      messageRecieved = false;
      motorDirection = true;
      moveRightMotor(Byte2);
    }else if(Byte1 == RIGHTMOTORBACKWARD){
      Bluetooth.println("RMB");
      messageRecieved = false;
      motorDirection = false;
      moveRightMotor(Byte2);
    }else if(Byte1 == LEFTSERVO){
      Bluetooth.println("LS");
      messageRecieved = false;
      moveLeftServo(Byte2);
    }else if(Byte1 == RIGHTSERVO){
      Bluetooth.println("RS");
      messageRecieved = false;
      moveRightServo(Byte2);
    }else if(Byte1 == LEDTOGGLE){
      Bluetooth.println("LED");
      ledToggle(Byte2);
    }else{
      Bluetooth.print("DNC: ");
      Bluetooth.print(Byte1);
      Bluetooth.print(" : ");
      Bluetooth.println(Byte2);
      messageRecieved = false;
      }
  }
  if (Bluetooth.available()){
    if(!byteCount){
      Byte1 = Bluetooth.read();
      byteCount = true;
    }else{
      Byte2 = Bluetooth.read();
      byteCount = false;
      messageRecieved = true;
      Serial.print("Message Recieved: ");
      Serial.print(Byte1);
      Serial.print(" : ");
      Serial.println(Byte2);
    }
  }
    
    
    //Serial.println("availiable");
    //Byte1=Bluetooth.read();
    //Serial.println(BluetoothData);
    //if(Byte1=='1'){   // if number 1 pressed ....
    //digitalWrite(ledpin,1);
    //Bluetooth.println("LED  On D13 ON ! ");
    //Genotronex.println("1");
    //}else if (Byte1=='0'){// if number 0 pressed ....
    //digitalWrite(ledpin,0);
    //Bluetooth.println("LED  On D13 Off ! ");
    //Genotronex.println("0");
    //}else {
   //   Bluetooth.print("DNC: ");
   //   Bluetooth.println(BluetoothData);
   //   }
delay(10);
}

void moveLeftServo(int command){
  if(command == SERVOCLOSE){
    leftServoPos -= ANGLECHANGE;
    leftServo.write(leftServoPos);
  }else if(command == SERVOOPEN){
    leftServoPos += ANGLECHANGE;
    leftServo.write(leftServoPos);
  }
}

void moveRightServo(int command){
  if(command == SERVOCLOSE){
    rightServoPos += ANGLECHANGE;
    rightServo.write(rightServoPos);
  }else if(command == SERVOOPEN){
    rightServoPos -= ANGLECHANGE;
    rightServo.write(rightServoPos);
  }
}

void moveLeftMotor(int command){
  analogWrite(leftMotorForwardPin, 0);
  analogWrite(leftMotorBackwardPin, 0);
  int spd = 0;
  if(command == SPEEDSLOW){
    spd = 512;
  }else if(command == SPEEDFAST){
    spd = 1024;
  }
  if(motorDirection){
    analogWrite(leftMotorForwardPin, spd);
  }else{
    analogWrite(leftMotorBackwardPin, spd);
  }
}

void moveRightMotor(int command){
  analogWrite(rightMotorForwardPin, 0);
  analogWrite(rightMotorBackwardPin, 0);
  int spd = 0;
  if(command == SPEEDSLOW){
    spd = 512;
  }else if(command == SPEEDFAST){
    spd = 1024;
  }
  if(motorDirection){
    analogWrite(rightMotorForwardPin, spd);
  }else{
    analogWrite(rightMotorBackwardPin, spd);
  }
}

void ledToggle(int command){
  if(ledOn){
    digitalWrite(ledPin,LOW);
    ledOn = false;
  }else{
    digitalWrite(ledPin,HIGH);
    ledOn = true;
  }
}
